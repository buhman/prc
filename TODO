prc (core)
==========

TODO
----

### Plugin sandboxing/IPC

A plugin that {segfaults,does invalid/evil things with memory,etc}
also causes prc itself to self-destruct. Instead plugins should run in
their own process and do IPC with prc.

### Plugin API refactor

The plugin API needs to be reworked completely--in particular, plugins
should be able to be explicit about which network a message should go
to rather than prc making these assumptions, and perhaps also a more
sane method for target redirection.

Most of this should hopefully happen naturally during the
sandbox/IPC refactor.

### buffer and tag mappings

Incoming protocol messages should be tagged based on match -> tag
mappings that the user creates, and stored in the log database
appropriately.

Similarly, the user should be able to map database tags to buffers,
and the terminal should draw the selected buffer(s) appropriately.

Interleaving multiple tags in the same buffer is also probably
desired, but would require significant modifications to the internal
row linkage format in BDB.

### World Domination

Sandbox
-------

### Global hashtable of hashtables

The global hashtable would be implemented as a singleton--libprc would
implement useful generic access methods. New hashtables would be
created on-the-fly as they are referenced when adding key/value pairs.

### New hashtable implementation

As fun as uthash is, I'm not sure how comfortable I am having ~1,000
lines of code in-tree that I do not maintain. I also don't like
staring at macro expansion errors and having to scroll through miles
of it just to find the real problem.

The buhman-hashtable doesn't even need to be quite as fast, etc.. as
uthash, it just needs to be buhman.

In particular, I would "solve" collision by requiring the verbatim
string be stored in a hashtable datastructure, then compare that to
the original value. dll.c would work well for this purpose.

Plugins
=======

### libquotes

Yet-another key-value database, this time of things people said. This
requires `Add 'buffer' (and logging) support`, in addition to
significant changes to the plugin architecture.

### libfacts

libfacts currently registers `fact_find` and `fact_add`; it would make
negligibly more sense if it registered only `fact`, where said
meta-handler would pass off `find`, `add`, etc...

It may also be desired to allow multiple values for the same key--a
hashtable implementation specifically designed for this would also
make this easier.

### libchess

during draw operations, the state-tracking operations will track
pieces as individual pieces; this allows:

* one-off highlighting of {last-moved piece,possible moves,*}

* possible-move highlighting will predecate move-validation

* move-validation will predicate less-explicit notations and more
  flexible move parsing

* game registration and multiple 'boards'/movesets

* save/restore boards

### libsteal

Interpret '!' commands (directed at phrik), and add whatever phrik
replies with to the factdb.

### libcalc

A (RPN?) calculator.